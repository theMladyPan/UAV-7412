#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEClient.h>
#include <BLEServer.h>
#include <BLEAdvertisedDevice.h>
#include <BLE2902.h>

#define STEAM_CONTROLLER_BUTTON_A                  0x800000
#define STEAM_CONTROLLER_BUTTON_X                  0x400000
#define STEAM_CONTROLLER_BUTTON_B                  0x200000
#define STEAM_CONTROLLER_BUTTON_Y                  0x100000
#define STEAM_CONTROLLER_BUTTON_LEFT_UPPER_PADDLE  0x080000
#define STEAM_CONTROLLER_BUTTON_RIGHT_UPPER_PADDLE 0x040000
#define STEAM_CONTROLLER_BUTTON_LEFT_PADDLE        0x020000
#define STEAM_CONTROLLER_BUTTON_RIGHT_PADDLE       0x010000
#define STEAM_CONTROLLER_BUTTON_LEFT_INNER_PADDLE  0x008000
#define STEAM_CONTROLLER_BUTTON_NAV_RIGHT          0x004000
#define STEAM_CONTROLLER_BUTTON_STEAM              0x002000
#define STEAM_CONTROLLER_BUTTON_NAV_LEFT           0x001000
#define STEAM_CONTROLLER_BUTTON_JOYSTICK           0x000040
#define STEAM_CONTROLLER_BUTTON_RIGHT_TOUCH        0x000010
#define STEAM_CONTROLLER_BUTTON_LEFT_TOUCH         0x000008
#define STEAM_CONTROLLER_BUTTON_RIGHT_PAD          0x000004
#define STEAM_CONTROLLER_BUTTON_LEFT_PAD           0x000002
#define STEAM_CONTROLLER_BUTTON_RIGHT_INNER_PADDLE 0x000001

#define STEAM_CONTROLLER_FLAG_REPORT               0x0004
#define STEAM_CONTROLLER_FLAG_BUTTONS              0x0010
#define STEAM_CONTROLLER_FLAG_PADDLES              0x0020
#define STEAM_CONTROLLER_FLAG_JOYSTICK             0x0080
#define STEAM_CONTROLLER_FLAG_LEFT_PAD             0x0100
#define STEAM_CONTROLLER_FLAG_RIGHT_PAD            0x0200


// enable notifications:
uint8_t startReportCommand[] = { 0xC0, 0x87, 0x03, 0x08, 0x07, 0x00 };  // 192, 135, 3, 8, 7, 0

BLEScan* pBLEScan;
BLEAddress* steam_controller_mac = NULL;
static bool ble_connected = false;

static BLEUUID     hidUUID("00001812-0000-1000-8000-00805f9b34fb");
static BLEUUID serviceUUID("100F6C32-1735-4313-B402-38567131E5F3");  // Steam Controller Custom service UUID
static BLEUUID   inputUUID("100F6C33-1735-4313-B402-38567131E5F3");  // Steam Controller Input characteristic UUID
static BLEUUID    rprtUUID("100F6C34-1735-4313-B402-38567131E5F3");  // Steam Controller Report characteristic UUID

void connectToController(BLEAddress steamControllerMac);

BLEService* pService;
BLECharacteristic* pReportCharacteristic;
BLECharacteristic* pInputCharacteristic;

class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    // print the mac address of the discovered device:
    ESP_LOGI("BLE Device", "Discovered device name: %s", advertisedDevice.getName().c_str());
    // if device name is SteamController, connect to it:
    if (advertisedDevice.getName() == "SteamController") {
      ESP_LOGI("BLE Device", "Discovered device: %s", advertisedDevice.getAddress().toString().c_str());
      // keep the address:
      steam_controller_mac = new BLEAddress(advertisedDevice.getAddress());
      // stop scanning:
      pBLEScan->stop();
    }
  }
};

class MyServerCallback : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    log_i("Connected to BLE server!");
    ble_connected = true;
  }

  void onDisconnect(BLEServer* pServer) {
    log_i("Disconnected from BLE server!");
    ble_connected = false;
  }
};

void setup() {
  Serial.begin(1500000);
  log_i("Scanning for BLE devices...");

  BLEDevice::init("ESP32");

  pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true);
  pBLEScan->start(30);

  log_i("Scanning complete!");

  // if we found the Steam Controller, connect to it:
  if (steam_controller_mac != NULL) {
    connectToController(*steam_controller_mac);
  }
}

class InputCallback : public BLECharacteristicCallbacks {
  void onNotify(BLECharacteristic* pCharacteristic, esp_ble_gatts_cb_param_t* param) {
    std::string value = pCharacteristic->getValue();
    log_i("Notified with value: %s", value.c_str());
  }

  void onRead(BLECharacteristic* pCharacteristic, esp_ble_gatts_cb_param_t* param) {
    log_i("Read from Steam Controller!");
  }
};


class ReportCallback : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic* pCharacteristic) {
    std::string value = pCharacteristic->getValue();
    log_i("Got value: %s", value.c_str());
  }

  void onRead(BLECharacteristic* pCharacteristic, esp_ble_gatts_cb_param_t* param) {
    log_i("Read from Steam Controller!");
  }
};


void connectToController(BLEAddress steamControllerMac) {
  BLEServer* pServer = BLEDevice::createServer();
  log_i("Created BLE server!");
  pServer->setCallbacks(new MyServerCallback());
  pServer->connect(steamControllerMac);
  log_i("Connected to Steam Controller!");
  delay(1e3);

  pService = pServer->createService(serviceUUID);
  // start the service:
  pService->start();
  log_i("Started service!");

  log_i("Created service!");
  pInputCharacteristic = pService->createCharacteristic(
    inputUUID, 
    BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY);
  log_i("Got input characteristic!");

  if(pInputCharacteristic == NULL) {
    log_i("Input characteristic is null!");
    esp_restart();
  }

  // set up the input characteristic:
  pInputCharacteristic->setCallbacks(new InputCallback());
  log_i("Set input characteristic callbacks!");

  pReportCharacteristic = pService->createCharacteristic(
    rprtUUID,
    BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_WRITE
    );
  log_i("Got report characteristic!");

  pReportCharacteristic->setCallbacks(new ReportCallback());
  log_i("Set report characteristic callbacks!");
}

void loop() {
  pReportCharacteristic->setValue(startReportCommand, 6);
  log_i("Set report characteristic value!");
  // Empty loop, BLE scanning and connection handled in setup()
  while(ble_connected) {
  }
  esp_restart();
}
